/**
 * Extends the database with methods for handling mumble users for linking with database users.
 * @param {Database} Database - The Database class to extend.
 * @return {undefined}
 */
const MumbleUsersExtension = function(Database) {
    /**
     * A Mumble user representation in the database used for storing linkage from mumble user to database users.
     * @typedef MumbleDatabaseUser
     * @property {number} id - Unique id as generated by the mumble server.
     * @property {string} username - The username of the user in the mumble server.
     */
    /**
     * <b>Async</b> Will return an array containing all mumble user ids of mumble users which
     * are linked to users in this bot and their counterparts usernames.
     * @return {MumbleDatabaseUser[]} - The mumble users in the database.
     */
    Database.prototype.getLinkedMumbleUsers = async function() {
        const rows = await this.connection.query(
            "SELECT m.mumbleId AS id, u.username AS username " +
            "FROM MumbleUsers m " +
            "LEFT JOIN Users u ON u.id = m.user"
        );
        return rows;
    };

    /**
     * <b>Async</b> Returns all mumble user ids of mumble users which are linked to the specified user.
     * @param {string} username - Name of the user of which the ids should be fetched.
     * @return {MumbleDatabaseUser[]} - The linked users of the requested database user.
     */
    Database.prototype.getLinkedMumbleUsersOfUser = async function(username) {
        const rows = await this.connection.query(
            "SELECT m.mumbleId AS id, u.username AS username " +
            "FROM MumbleUsers m " +
            "LEFT JOIN Users u ON u.id = m.user WHERE u.username = ?",
            [username]
        );
        return rows;
    };

    /**
     * <b>Async</b> Links a mumble user to a user in this bot.
     * @param {number} id - Id of the mumble user to link.
     * @param {string} username - User to which the mumble user should be linked.
     * @return {undefined}
     */
    Database.prototype.linkMumbleUser = async function(id, username) {
        await this.connection.query(
            "INSERT INTO MumbleUsers(mumbleId, user) VALUES(?, (SELECT id FROM Users WHERE username = ?))",
            [id, username]
        );
    }

    /**
     * <b>Async</b> Returns the full user to which a mumble user id is linked.
     * @param {number} id - Id of the mumble user to check.
     * @return {DatabaseUser} - User in the database which is linked with the given mumble users id.
     */
    Database.prototype.getLinkedUser = async function(id) {
        const rows = await this.connection.query("SELECT user FROM MumbleUsers WHERE mumbleId = ?", [id]);
        if(rows.length > 0) {
            const user = await this.getUserById(rows[0].user);
            return user;
        }
        else {
            return null;
        }
    }
}

export default MumbleUsersExtension;
