stages:
  - build
  - test
  - deploy

variables:
  POSTGRES_DB: bot-test
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST: "postgres"
  MUMBLE_URL: dcshock-docker-mumble-server
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE: registry.gitlab.com/$CI_PROJECT_PATH

build-docker:
  stage: build
  services:
    - docker:dind
  image: docker:stable
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
  script:
    - docker pull $DOCKER_IMAGE:latest || true
    - docker build --cache-from $DOCKER_IMAGE:latest --tag $DOCKER_IMAGE:$CI_BUILD_REF --tag $DOCKER_IMAGE:latest .
    - docker push $DOCKER_IMAGE:$CI_BUILD_REF
    - docker push $DOCKER_IMAGE:latest

integration-test:
  services:
    - postgres:latest
    - dcshock/docker-mumble-server:latest
  image: $DOCKER_IMAGE:$CI_BUILD_REF
  script:
    - make integration-test
  stage: test
  artifacts:
    when: always
    paths:
      - jest-screenshot-report/
  allow_failure: true

test:
  services:
    - postgres:latest
  image: $DOCKER_IMAGE:$CI_BUILD_REF
  script:
    - make test
  stage: test
  artifacts:
    when: always
    paths:
      - coverage/

lint:
  image: $DOCKER_IMAGE:$CI_BUILD_REF
  script:
    - make lint
  stage: test

build:
  image: $DOCKER_IMAGE:$CI_BUILD_REF
  script:
    - make release
  stage: test
  artifacts:
    paths:
      - dist/
      - server/
      - src/
      - package.json
      - yarn.lock
      - typings/
      - README.md

deploy:
  image: "alpine:3.7"
  before_script:
    - apk --update add ansible git openssh python py2-pip rsync gnupg
    - mkdir ~/.ssh
    - echo "$SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - cd deploy
    - mkdir /tmp/backup
    - ansible-playbook mumble-bot.yml --extra-vars "database_password='$DATABASE_PASSWORD' bot_key='$BOT_KEY'"
  after_script:
    - gpg --symmetric --batch --passphrase $BACKUP_ENCRYPTION_KEY --output jenny.sql.gpg /tmp/jenny.sql
    - ls -lAh jenny.sql.gpg
  dependencies:
    - build
  stage: deploy
  when: manual
  only:
    - master
  artifacts:
    when: always
    paths:
      - jenny.sql.gpg
